#!/usr/bin/python
# -*- coding: utf-8 -*-

# execution.py

from __future__ import print_function

from abc import ABCMeta, abstractmethod
from pytrading.event.order_event import OrderEvent


class ExecutionHandler(object):
	"""
	This abstract class handles the interaction between a set of Order objects
	generated by a Portfolio object and the ultimate set of Fill objects that
	actually occur in the market.

	The handlers can be used to subclass simulated brokerages or live brokerages,
	with identical interfaces. This allows strategies to be backtested in a very
	similar manner to the live trading engine.
	"""
	__metaclass__ = ABCMeta

	@abstractmethod
	def execute_order(self, event: OrderEvent):
		"""
		Takes an OrderEvent and executes it. Outputs a FillEvent that gets
		placed onto the Events queue.

		:param event: The OrderEvent object with order information.
		:return:
		"""
		raise NotImplementedError("Should implement execute_order()")
